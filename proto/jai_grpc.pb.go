// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: jai.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JsonAIService_SayHello_FullMethodName  = "/proto.JsonAIService/SayHello"
	JsonAIService_Login_FullMethodName     = "/proto.JsonAIService/Login"
	JsonAIService_ListChats_FullMethodName = "/proto.JsonAIService/ListChats"
	JsonAIService_GetChat_FullMethodName   = "/proto.JsonAIService/GetChat"
	JsonAIService_AskJsonAI_FullMethodName = "/proto.JsonAIService/AskJsonAI"
)

// JsonAIServiceClient is the client API for JsonAIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JsonAIServiceClient interface {
	SayHello(ctx context.Context, in *SayHello_Request, opts ...grpc.CallOption) (*SayHello_Response, error)
	Login(ctx context.Context, in *Login_Request, opts ...grpc.CallOption) (*Login_Response, error)
	ListChats(ctx context.Context, in *ListChats_Request, opts ...grpc.CallOption) (*ListChats_Response, error)
	GetChat(ctx context.Context, in *GetChat_Request, opts ...grpc.CallOption) (*GetChat_Response, error)
	AskJsonAI(ctx context.Context, in *AskJsonAI_Request, opts ...grpc.CallOption) (*AskJsonAI_Response, error)
}

type jsonAIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJsonAIServiceClient(cc grpc.ClientConnInterface) JsonAIServiceClient {
	return &jsonAIServiceClient{cc}
}

func (c *jsonAIServiceClient) SayHello(ctx context.Context, in *SayHello_Request, opts ...grpc.CallOption) (*SayHello_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SayHello_Response)
	err := c.cc.Invoke(ctx, JsonAIService_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonAIServiceClient) Login(ctx context.Context, in *Login_Request, opts ...grpc.CallOption) (*Login_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Login_Response)
	err := c.cc.Invoke(ctx, JsonAIService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonAIServiceClient) ListChats(ctx context.Context, in *ListChats_Request, opts ...grpc.CallOption) (*ListChats_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChats_Response)
	err := c.cc.Invoke(ctx, JsonAIService_ListChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonAIServiceClient) GetChat(ctx context.Context, in *GetChat_Request, opts ...grpc.CallOption) (*GetChat_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChat_Response)
	err := c.cc.Invoke(ctx, JsonAIService_GetChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonAIServiceClient) AskJsonAI(ctx context.Context, in *AskJsonAI_Request, opts ...grpc.CallOption) (*AskJsonAI_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AskJsonAI_Response)
	err := c.cc.Invoke(ctx, JsonAIService_AskJsonAI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JsonAIServiceServer is the server API for JsonAIService service.
// All implementations must embed UnimplementedJsonAIServiceServer
// for forward compatibility.
type JsonAIServiceServer interface {
	SayHello(context.Context, *SayHello_Request) (*SayHello_Response, error)
	Login(context.Context, *Login_Request) (*Login_Response, error)
	ListChats(context.Context, *ListChats_Request) (*ListChats_Response, error)
	GetChat(context.Context, *GetChat_Request) (*GetChat_Response, error)
	AskJsonAI(context.Context, *AskJsonAI_Request) (*AskJsonAI_Response, error)
	mustEmbedUnimplementedJsonAIServiceServer()
}

// UnimplementedJsonAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJsonAIServiceServer struct{}

func (UnimplementedJsonAIServiceServer) SayHello(context.Context, *SayHello_Request) (*SayHello_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedJsonAIServiceServer) Login(context.Context, *Login_Request) (*Login_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedJsonAIServiceServer) ListChats(context.Context, *ListChats_Request) (*ListChats_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChats not implemented")
}
func (UnimplementedJsonAIServiceServer) GetChat(context.Context, *GetChat_Request) (*GetChat_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedJsonAIServiceServer) AskJsonAI(context.Context, *AskJsonAI_Request) (*AskJsonAI_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskJsonAI not implemented")
}
func (UnimplementedJsonAIServiceServer) mustEmbedUnimplementedJsonAIServiceServer() {}
func (UnimplementedJsonAIServiceServer) testEmbeddedByValue()                       {}

// UnsafeJsonAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JsonAIServiceServer will
// result in compilation errors.
type UnsafeJsonAIServiceServer interface {
	mustEmbedUnimplementedJsonAIServiceServer()
}

func RegisterJsonAIServiceServer(s grpc.ServiceRegistrar, srv JsonAIServiceServer) {
	// If the following call pancis, it indicates UnimplementedJsonAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JsonAIService_ServiceDesc, srv)
}

func _JsonAIService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHello_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonAIServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonAIService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonAIServiceServer).SayHello(ctx, req.(*SayHello_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonAIService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonAIServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonAIService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonAIServiceServer).Login(ctx, req.(*Login_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonAIService_ListChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChats_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonAIServiceServer).ListChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonAIService_ListChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonAIServiceServer).ListChats(ctx, req.(*ListChats_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonAIService_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChat_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonAIServiceServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonAIService_GetChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonAIServiceServer).GetChat(ctx, req.(*GetChat_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonAIService_AskJsonAI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskJsonAI_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonAIServiceServer).AskJsonAI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonAIService_AskJsonAI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonAIServiceServer).AskJsonAI(ctx, req.(*AskJsonAI_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// JsonAIService_ServiceDesc is the grpc.ServiceDesc for JsonAIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JsonAIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.JsonAIService",
	HandlerType: (*JsonAIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _JsonAIService_SayHello_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _JsonAIService_Login_Handler,
		},
		{
			MethodName: "ListChats",
			Handler:    _JsonAIService_ListChats_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _JsonAIService_GetChat_Handler,
		},
		{
			MethodName: "AskJsonAI",
			Handler:    _JsonAIService_AskJsonAI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jai.proto",
}
